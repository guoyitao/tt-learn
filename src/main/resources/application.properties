
#一个实体类可以对应多张表 必须设置不然报错
spring.main.allow-bean-definition-overriding=true
#水平分库2个数据源
spring.shardingsphere.datasource.names=ds1,ds2,ds0,ds0s

spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.url=jdbc:mysql://localhost:3306/edu_1?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=guoyitao123

spring.shardingsphere.datasource.ds2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds2.url=jdbc:mysql://localhost:3306/edu_2?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.ds2.username=root
spring.shardingsphere.datasource.ds2.password=guoyitao123

#user_db 的主服务器
spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.url=jdbc:mysql://localhost:3306/user_db?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=guoyitao123

#user_db 的从服务器
spring.shardingsphere.datasource.ds0s.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0s.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0s.url=jdbc:mysql://localhost:3307/user_db?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.ds0s.username=root
spring.shardingsphere.datasource.ds0s.password=guoyitao123

spring.shardingsphere.sharding.master-slave-rules.userds0.master-data-source-name=ds0
spring.shardingsphere.sharding.master-slave-rules.userds0.slave-data-source-names=ds0s

#配置公共表
spring.shardingsphere.sharding.broadcast-tables=t_udict
spring.shardingsphere.sharding.tables.t_udict.key-generator.column=dictid
spring.shardingsphere.sharding.tables.t_udict.key-generator.type=SNOWFLAKE


#配置user_db 数据库里面的t_user 专库专表 主从配置
spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=userds0.t_user
#主键和主键生成算法 雪花算法
spring.shardingsphere.sharding.tables.t_user.key-generator.column=user_id
spring.shardingsphere.sharding.tables.t_user.key-generator.type=SNOWFLAKE
#表的分片策略
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user


#course指定数据库的分布情况，和表的情况
spring.shardingsphere.sharding.tables.course.actual-data-nodes=ds$->{1..2}.course_$->{1..2}
#主键和主键生成算法 雪花算法
spring.shardingsphere.sharding.tables.course.key-generator.column=cid
spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE
#表的分片策略      cid 偶数就添加到course_1  否则就course_2
spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=cid
spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$->{cid % 2 + 1}

#库分片策略 偶数ds1 奇数ds2
#指定表
spring.shardingsphere.sharding.tables.course.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.course.database-strategy.inline.algorithm-expression=ds$->{user_id % 2 +1}

#底层sql输出日志
spring.shardingsphere.props.sql.show=true


